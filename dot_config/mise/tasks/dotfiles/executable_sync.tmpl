#!/usr/bin/env zsh

#MISE description="同步 Chezmoi dotfiles 配置"
#MISE shell="zsh"
#USAGE flag "-f --force" help="强制更新配置，忽略时间间隔"
#USAGE flag "-s --status" help="显示当前同步状态"
#USAGE flag "-h --help" help="显示帮助信息"

set -euo pipefail

# 默认配置
DEFAULT_INTERVAL=86400  # 24小时
LAST_UPDATE_FILE="$HOME/.cache/chezmoi_last_update"
CHEZMOI_DIR="${CHEZMOI_DIR:-$HOME/.local/share/chezmoi}"

# 解析命令行参数
FORCE_UPDATE=false
SHOW_STATUS=false
SHOW_HELP=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -f|--force)
      FORCE_UPDATE=true
      shift
      ;;
    -s|--status)
      SHOW_STATUS=true
      shift
      ;;
    -h|--help)
      SHOW_HELP=true
      shift
      ;;
    *)
      echo "未知参数: $1"
      echo "使用 --help 查看帮助信息"
      exit 1
      ;;
  esac
done

# 显示帮助
if [[ "$SHOW_HELP" == "true" ]]; then
  echo "用法: mise run dotfiles:sync [选项]"
  echo ""
  echo "选项:"
  echo "  -f, --force    强制更新配置，忽略时间间隔"
  echo "  -s, --status   显示当前同步状态"
  echo "  -h, --help     显示此帮助信息"
  echo ""
  echo "环境变量:"
  echo "  CHEZMOI_DIR    Chezmoi 目录 (默认: ~/.local/share/chezmoi)"
  echo ""
  echo "示例:"
  echo "  mise run dotfiles:sync              # 检查并更新配置"
  echo "  mise run dotfiles:sync --force      # 强制更新配置"
  echo "  mise run dotfiles:sync --status     # 显示状态"
  exit 0
fi

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# 检查是否需要更新
should_update() {
    if [[ "$FORCE_UPDATE" == "true" ]]; then
        return 0
    fi

    local current_time=$(date +%s)

    if [[ ! -f "$LAST_UPDATE_FILE" ]]; then
        return 0
    fi

    local last_update=$(cat "$LAST_UPDATE_FILE" 2>/dev/null || echo "0")
    local time_diff=$((current_time - last_update))

    return $((time_diff < DEFAULT_INTERVAL))
}

# 显示状态
show_status() {
    if [[ ! -d "$CHEZMOI_DIR" ]]; then
        log_error "Chezmoi 目录不存在: $CHEZMOI_DIR"
        return 1
    fi

    cd "$CHEZMOI_DIR" || { log_error "无法访问 Chezmoi 目录"; return 1; }

    echo "📊 配置状态:"

    if git rev-parse --git-dir >/dev/null 2>&1; then
        local local_head="unknown"
        local branch="unknown"
        local remote_head="unknown"

        local_head=$(git rev-parse --short HEAD 2>/dev/null) || local_head="unknown"
        branch=$(git branch --show-current 2>/dev/null) || branch="unknown"

        if git remote get-url origin >/dev/null 2>&1; then
            remote_head=$(git rev-parse --short "origin/$branch" 2>/dev/null) || remote_head="unknown"
        fi

        echo "   本地分支: $branch"
        echo "   本地提交: $local_head"
        echo "   远程提交: $remote_head"

        if [[ -f "$LAST_UPDATE_FILE" ]]; then
            local last_update_time="unknown"
            last_update_time=$(date -r "$LAST_UPDATE_FILE" 2>/dev/null) || last_update_time="unknown"
            echo "   最后更新: $last_update_time"
        else
            echo "   最后更新: 从未"
        fi

        # 检查是否有更新
        if [[ "$local_head" != "unknown" && "$remote_head" != "unknown" && "$local_head" != "$remote_head" ]]; then
            echo "   状态: 🟡 有更新可用"
        else
            echo "   状态: 🟢 已是最新"
        fi
    else
        echo "   状态: 🔴 不是 Git 仓库"
    fi
}

# 执行同步
sync_config() {
    if [[ ! -d "$CHEZMOI_DIR" ]]; then
        log_error "Chezmoi 目录不存在: $CHEZMOI_DIR"
        return 1
    fi

    if [[ ! -d "$CHEZMOI_DIR/.git" ]]; then
        log_error "不是 Git 仓库，无法同步"
        return 1
    fi

    cd "$CHEZMOI_DIR" || { log_error "无法访问 Chezmoi 目录"; return 1; }

    # 检查远程连接
    if ! git remote get-url origin >/dev/null 2>&1; then
        log_error "没有配置远程仓库"
        return 1
    fi

    # 检查是否需要更新
    if ! should_update; then
        log_info "配置检查间隔未到，跳过更新"
        log_info "使用 --force 强制更新"
        return 0
    fi

    log_info "检查远程更新..."

    # 获取远程信息
    if ! git fetch --quiet 2>/dev/null; then
        log_error "无法获取远程更新，检查网络连接"
        return 1
    fi

    # 检查是否有更新
    local local_head=$(git rev-parse HEAD)
    local remote_head=$(git rev-parse origin/$(git branch --show-current) 2>/dev/null)

    if [[ "$local_head" == "$remote_head" ]]; then
        log_success "配置已是最新"
        date +%s > "$LAST_UPDATE_FILE"
        return 0
    fi

    log_info "发现配置更新，正在同步..."

    # 执行更新
    if git pull --rebase; then
        log_success "配置下载完成"

        # 应用配置
        log_info "应用配置变更..."
        if chezmoi apply; then
            log_success "配置应用完成！"

            # 显示变更摘要
            local commit_count=$(git rev-list --count $local_head..$remote_head 2>/dev/null || echo "unknown")
            log_info "更新了 $commit_count 个提交"

            date +%s > "$LAST_UPDATE_FILE"
            return 0
        else
            log_error "配置应用失败"
            return 1
        fi
    else
        log_error "配置下载失败，可能存在冲突"
        log_info "请手动处理: cd $CHEZMOI_DIR && git status"
        return 1
    fi
}

# 主逻辑
if [[ "$SHOW_STATUS" == "true" ]]; then
    show_status
else
    sync_config
fi
